#Google
spring.security.oauth2.client.registration.google.client-id=697116112098-i5gl2b4sjvkdji9dd19nnsq99ilnf6h3.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile, email

#scope는 디폴트가, profile, email, openid 인데 openid라는 scope가 있으면 OAuth2 provider로 인식하기 때문에 다른 소셜 로그인
#사용 시 각각의 Oauth2Service를 만들어야한다. -> 하나의 service만 구현하기 위해 scope를 지정

#spring boot에서 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성되어 이를 통해 관리할 수 있다.
#즉 profile=xxx라는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있다.


#Naver (Naver는 구글처럼 스프링 시큐리티를 공식 지원해주지 않기 때문에 Common-OAuth2Provider에서 해주던 값들도 전부 수동 입력해야한다.)
#registration
spring.security.oauth2.client.registration.naver.client-id=6JlFyUbv0dZqrt3y_Bc5
spring.security.oauth2.client.registration.naver.client-secret=o4IZ_lzzGk
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name, email, profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver
# 네이버의 token-uri 속성 추가

#provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
#naver API 응답값이 response 안에 username이 들어있다. 시큐리티에서는 하위필드를 명시할 수 없기 때문에 response로 받아서 username을 지정해야함
spring.security.oauth2.client.provider.naver.user-name-attribute=response



